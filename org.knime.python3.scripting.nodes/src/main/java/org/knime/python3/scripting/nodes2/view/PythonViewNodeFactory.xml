<?xml version="1.0" encoding="UTF-8"?>
<knimeNode icon="python.png" type="Visualizer" xmlns="http://knime.org/node/v4.1"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://knime.org/node/v4.1 http://knime.org/node/v4.1.xsd">
	<name>Python View (Labs)</name>
	<shortDescription>
		Allows executing a Python script in a local Python environment.
	</shortDescription>
	<fullDescription>
		<intro>
			TODO
			Make sure to set the <tt>knio.output_view</tt> variable to a view created with any of the <tt>knio.view</tt>
			functions.
		</intro>
	</fullDescription>
	<ports>
		<dynInPort name="Pickled object" group-identifier="Input object (pickled)" insert-before="0">
			An input object. Input objects are automatically unpickled for you. You can access them via
			<tt>knio.input_objects</tt>. For example, the first input object can be accessed like this:
			<tt>knio.input_objects[0]</tt>.
		</dynInPort>
		<dynInPort name="Table" group-identifier="Input table" insert-before="0">
			An input table. You can access input tables via <tt>knio.input_tables</tt>. For example, the first input
			table can be accessed like this: <tt>knio.input_tables[0]</tt>. Each table is an instance of type
			<tt>knime.api.table.Table</tt>. Before being able to work with the table, you have to convert it into, for
			example, a <tt>pandas.DataFrame</tt> or a <tt>pyarrow.Table</tt>. Please refer to the
			<a href="https://docs.knime.com/latest/python_installation_guide/">KNIME Python Integration Guide</a> to
			learn how to do this, or take a look at one of the templates on the <i>Templates</i> tab of the node.
		</dynInPort>
		<dynOutPort name="Image" group-identifier="Output image" insert-before="0">
			An output image. The image can be populated via <tt>knio.output_images[0]</tt> in your script. To
			populate the output image, assign it a value like this <tt>knio.output_images[0] = &lt;value&gt;</tt>.
			The assigned value must be a bytes-like object encoding a PNG or SVG image.
			If no value is assinged to <tt>knio.output_images[0]</tt> the node will try to generate an SVG or PNG
			image from <tt>knio.output_view</tt>.
		</dynOutPort>
	</ports>
	<views>
		<view name="Output" index="0">
			The output view created by the Python script. Use <tt>knio.view(obj)</tt> function to create a view and
			assign to <tt>knio.output_view</tt>.
		</view>
	</views>
</knimeNode>
